generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  first_name    String
  last_name     String
  password      String
  mobile_number String
  roleId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  image         String?
  role          Role     @relation(fields: [roleId], references: [id])
  notifications Notification[]
  blogs          Blog[]

  @@index([roleId], map: "User_roleId_fkey")
}

model Category {
  id             Int            @id @default(autoincrement())
  category_name  String         @unique
  category_image String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  status         CategoryStatus @default(ACTIVE)
  blogs          Blog[]  
  services       Service[]
}

model Service {
  id                  Int      @id @default(autoincrement())
  categoryId          Int
  heading             String
  subheading          String
  courseDescription   String
  testimonials        String? @db.Text
  programDetails      String? @db.Text 
  courseDetails       String? @db.Text 
  hero_image          String?
  image               String?
  slug                String   @unique
  meta_title          String?
  meta_description    String?
  og_title            String?
  og_image            String?
  keywords            String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  category            Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId], map: "Service_categoryId_fkey")
}

enum CategoryStatus {
  ACTIVE
  INACTIVE

}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  userId    Int
  status    String   @default("unread") // Could be "read" or "unread"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id]) // Relation to the User model

  @@index([userId], map: "Notification_userId_fkey")
}

model Blog {
  id          Int        @id @default(autoincrement())
  title       String     // Blog title
  content     String     @db.LongText // Blog content
  published   Boolean    @default(false) // Whether the blog is published
  authorId    Int        // Author (reference to the User model)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categoryId  Int        // Blog's category
  slug        String     @unique // Unique slug for SEO and URL
  meta_title  String?    // Meta title for SEO
  meta_desc   String?    // Meta description for SEO
  tags        Tag[]      @relation("BlogTags") // Many-to-many relation with Tag
  image       String?
  author      User       @relation(fields: [authorId], references: [id])
  category    Category   @relation(fields: [categoryId], references: [id])
  og_image    String?
  visits      Visit[]  @relation("BlogVisits")
  @@index([slug], name: "Blog_slug_idx")
}


model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  blogs     Blog[]    @relation("BlogTags") // Many-to-many relation with Blog
  @@index([name], name: "Tag_name_idx")
}


model DownloadEntry {
  id        Int      @id @default(autoincrement()) 
  downloaded Boolean  @default(false)
  name      String
  last_name String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Visit {
  id        Int      @id @default(autoincrement())
  blogId    Int
  userId    Int
  visitedAt DateTime @default(now())
  blog      Blog     @relation("BlogVisits", fields: [blogId], references: [id])
}

model Subscription {
  id           Int      @id @default(autoincrement())
  endpoint     String   @db.VarChar(2048) // You can keep this column as is or adjust the length if needed
  keys_p256dh  String
  keys_auth    String   @unique          // Make `keys_auth` unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}




